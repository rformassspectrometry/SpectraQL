[{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mass Spec Query Language Support to the Spectra Package","text":"Mass Spec Query Language (MassQL) domain specific language meant succinct way express query mass spectrometry (MS) centric fashion. inspired SQL, attempts bake assumptions MS make querying much natural MS users. SpectraQL package provides support MassQL language R, MS data represented Spectra objects defined Bioconductor’s Spectra package.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Mass Spec Query Language Support to the Spectra Package","text":"package can installed BiocManager package using:","code":"## Install BiocManager, if not already installed install.packages(\"BiocManager\") ## Install the package BiocManager::install(\"SpectraQL\")"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"extracting-data-from-spectra-objects-with-massql","dir":"Articles","previous_headings":"","what":"Extracting data from Spectra objects with MassQL","title":"Mass Spec Query Language Support to the Spectra Package","text":"SpectraQL package adds support Mass Spec Query Language functionality Spectra objects hence allowing filter extract data using platform independent data storage agnostic queries. present, SpectraQL supports , conditions expressions MassQL definition. particular, numeric operations query fields MS2PROD=100+14 yet supported. load MS data example mzML file. Note also Spectra objects can represent MS data large variety sources including limited mzML mzXML files, databases (e.g. MsBackendMassbank) MGF files (MsBackendMgf). use Spectra hence SpectraQL package thus restricted mzML-backed MS data.","code":"library(Spectra) library(SpectraQL) library(msdata)  fl <- system.file(\"TripleTOF-SWATH\", \"PestMix1_DDA.mzML\", package = \"msdata\") dda <- Spectra(fl)"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"massql-definition","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL","what":"MassQL definition","title":"Mass Spec Query Language Support to the Spectra Package","text":"MassQL query consists several parts: \"QUERY <type data> <condition> <condition> FILTER <filter> <filter>\" (see definition details). \"<type data>\" defines data extracted selected data set, \"<condition>\" defines spectra selected \"<filter>\" allows subset individual spectrum (.e. mass peaks spectrum subsetted). See following sections information part MassQL query. SpectraQL supports MassQL query schema however case insensitive (.e. \"query\" \"QUERY\" accepted) insensitive white spaces (.e. \"RTMIN=10\" \"RTMIN = 10\" supported). Also, noted keywords, filters operations defined MassQL yet supported SpectraQL. supported types data, conditions filters listed sections .","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"type-of-data","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > MassQL definition","what":"Type of data","title":"Mass Spec Query Language Support to the Spectra Package","text":"\"<type data>\" defines returned query function. addition, functions can specified applied \"<type data>\" summarize results. types data currently supported SpectraQL : \"*\": returns full data, .e. returns Spectra object. \"MS1DATA\" (case insensitive): returns (function defined; see ) peaks data selected MS1 scans (.e. list matrices m/z intensity values). \"MS2DATA\" (case insensitive): returns (function defined) peaks data selected MS2 scans (.e. list matrices m/z intensity values). addition, functions can used extract specific information selected spectra. SpectraQL supports present following functions defined MassQL: \"scaninfo\": e.g. \"scaninfo(MS1DATA)\" \"scaninfo(MS2DATA)\" extract spectra information MS1 MS2 scans, respectively. returns spectraData sub-setted Spectra object. \"scansum\": e.g. \"scansum(MS1DATA)\" \"scansum(MS2DATA)\" extract TIC (sum peak intensities) selected spectra.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"condition","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > MassQL definition","what":"Condition","title":"Mass Spec Query Language Support to the Spectra Package","text":"\"<condition>\" allows subset Spectra object. Several conditions can combined \"\". syntax condition \"<condition> = <value>\", e.g. \"MS2PROD = 144.1\". conditions can refined additional expressions allow example define acceptable tolerances m/z differences (see details). SpectraQL supports following conditions: \"RTMIN\": minimum retention time (seconds). \"RTMAX\": maximum retention time (seconds). \"SCANMIN\": minimum scan number (acquisition number). \"SCANMAX\": maximum scan number (acquisition number). \"CHARGE\": charge MS2 spectra. \"POLARITY\": polarity spectra (can \"positive\", \"negative\", \"pos\" \"neg\", case insensitive). \"MS2PROD\" \"MS2MZ\": allows select MS2 spectra contain peak particular m/z. \"MS2PREC\": allows select MS2 spectra defined precursor m/z. \"MS1MZ\": allows select MS1 spectra containing peaks defined m/z. \"MS2NL\": allows look neutral loss precursor MS2 spectra. conditions involving m/z values allow specify mass accuracy using optional fields \"TOLERANCEMZ\" \"TOLERANCEPPM\" define absolute m/z-relative acceptable difference m/z values. One fields can attached condition \"MS2PREC=100:TOLERANCEMZ=0.1:TOLERANCEPPM=20\" select example MS2 spectra precursor m/z equal 100 accepting difference 0.1 20 ppm. Note contrast MassQL, default tolarance ppm 0 calls.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"filter","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > MassQL definition","what":"Filter","title":"Mass Spec Query Language Support to the Spectra Package","text":"Filters allow subset individual spectra keeping e.g. peaks match user-defined m/z value. SpectraQL supports following filters: \"MS1MZ\": filters MS1 spectra keeping peaks matching m/z values (tolerance can specified \"TOLERANCEMZ\" \"TOLERANCEPPM\". \"MS2MZ\": filters MS2 spectra keeping peaks matching m/z values (tolerance can specified \"TOLERANCEMZ\" \"TOLERANCEPPM\".","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"differences-of-the-spectraql-implementation-to-the-massql-definition","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > MassQL definition","what":"Differences of the SpectraQL implementation to the MassQL definition","title":"Mass Spec Query Language Support to the Spectra Package","text":"Retention times (\"RTMIN\", \"RTMAX\") expressed seconds, minutes. Default \"TOLERANCEMZ\" 0 instead 0.1.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"examples","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL","what":"Examples","title":"Mass Spec Query Language Support to the Spectra Package","text":"section use MassQL queries subset extract data Spectra object dda. object contains MS1 MS2 spectra data dependent acquisition. general information provided .","code":"#' Number of MS1 and MS2 spectra table(msLevel(dda)) ##  ##    1    2  ## 4627 2975 #' retention time range range(rtime(dda)) ## [1]   0.231 899.993"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"filtering-and-subsetting","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > Examples","what":"Filtering and subsetting","title":"Mass Spec Query Language Support to the Spectra Package","text":"restrict data spectra measured 200 300 seconds measurement run can use MassQL query \"rtmin\" \"rtmax\" conditions. Internally, SpectraQL translates MassQL query filter functions applied Spectra object. returned result now Spectra object spectra measured 200 300 seconds. restrict MS2 spectra precursor m/z matching certain value, can use \"MS2PREC\" condition. Conditions m/z values support also accuracy specifications. Using \"TOLERANCEMZ\" \"TOLERANCEPPM\" thus possible define absolute m/z relative acceptable difference. use condition select MS2 spectra precursor m/z matching 278.093 tolerance 0 ppm 20. Since SpectraQL case insensitive, write full MassQL query lower case . thus selected 9 spectra data set precursor m/z matching filter criteria. can obviously also combine two queries single MassQL query. time also omit \"tolerancemz\" field set anyway value 0. conditions \"MS2PROD\", \"MS2PREC\" \"MS1MZ\" also possible provide multiple values select spectra match provided m/z values. values can separated \"\" (\"\"), \"TOLERANCEPPM\" \"TOLERANCEMZ\" applied . select spectra contain (MS1) peak m/z matching provided values. Note using \"MS1MZ\" return MS1 spectra \"MS2PROD\", \"MS2MZ\" \"MS2PREC\" MS2 spectra.","code":"dda_rt <- query(dda, \"QUERY * WHERE RTMIN = 200 AND RTMAX = 300\") dda_rt ## MSn data (Spectra) with 717 spectra in a MsBackendMzR backend: ##       msLevel     rtime scanIndex ##     <integer> <numeric> <integer> ## 1           1   200.053      1554 ## 2           1   200.173      1555 ## 3           1   200.293      1556 ## 4           1   200.413      1557 ## 5           1   200.533      1558 ## ...       ...       ...       ... ## 713         1   299.176      2266 ## 714         1   299.304      2267 ## 715         2   299.575      2268 ## 716         1   299.713      2269 ## 717         2   299.985      2270 ##  ... 34 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## Processing: ##  Filter: select retention time [200..300] on MS level(s)  [Fri May 16 19:49:56 2025] range(rtime(dda_rt)) ## [1] 200.053 299.985 dda_pmz <- query(     dda,     \"query * where ms2prec = 278.093:toleancemz=0:toleranceppm=30\") length(dda_pmz) ## [1] 9 dda_pmz ## MSn data (Spectra) with 9 spectra in a MsBackendMzR backend: ##     msLevel     rtime scanIndex ##   <integer> <numeric> <integer> ## 1         2   268.587      2041 ## 2         2   269.007      2043 ## 3         2   269.427      2046 ## 4         2   381.709      3058 ## 5         2   382.069      3062 ## 6         2   382.549      3066 ## 7         2   385.879      3105 ## 8         2   386.699      3120 ## 9         2   387.849      3137 ##  ... 34 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## Processing: ##  Filter: select spectra with precursor m/z matching 278.093 [Fri May 16 19:49:56 2025] precursorMz(dda_pmz) ## [1] 278.0936 278.0914 278.0954 278.0921 278.0909 278.0917 278.0913 278.0914 ## [9] 278.0918 dda_rt <- query(dda,                 paste0(\"query * where rtmin = 200 and rtmax = 300 and \",                        \"ms2prec = 278.093:toleranceppm = 30\")) dda_rt ## MSn data (Spectra) with 3 spectra in a MsBackendMzR backend: ##     msLevel     rtime scanIndex ##   <integer> <numeric> <integer> ## 1         2   268.587      2041 ## 2         2   269.007      2043 ## 3         2   269.427      2046 ##  ... 34 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## Processing: ##  Filter: select retention time [200..300] on MS level(s)  [Fri May 16 19:49:56 2025] ##  Filter: select spectra with precursor m/z matching 278.093 [Fri May 16 19:49:56 2025] query(dda, \"QUERY * WHERE MS1MZ = (123 OR 234.1 OR 300):TOLERANCEMZ=0.05\") ## MSn data (Spectra) with 2384 spectra in a MsBackendMzR backend: ##        msLevel     rtime scanIndex ##      <integer> <numeric> <integer> ## 1            1     0.471         3 ## 2            1     0.591         4 ## 3            1     1.191         9 ## 4            1     1.311        10 ## 5            1     1.551        12 ## ...        ...       ...       ... ## 2380         1   899.491      7598 ## 2381         1   899.613      7599 ## 2382         1   899.747      7600 ## 2383         1   899.872      7601 ## 2384         1   899.993      7602 ##  ... 34 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## Processing: ##  Filter: select MS level(s) 1 [Fri May 16 19:49:56 2025]"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"choosing-which-data-to-return","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > Examples","what":"Choosing which data to return","title":"Mass Spec Query Language Support to the Spectra Package","text":"Thus far uses \"*\" queries, returns result Spectra object. Alternatively, can use \"MS1DATA\" \"MS2DATA\" return peak data MS1 MS2 spectra, respectively. result thus Spectra object, list two-column matrices m/z intensity values selected spectra. use extract peaks data MS2 spectra measured 200 300 seconds. can addition also use functions extract specific data result. \"scansum\" example return sum intensities per spectra thus allow extract total ion chromatogram:  Please note x-axis represent retention times scan indices. function \"scaninfo\" extracts information selected spectra. SpectraQL means result spectraData() returned:","code":"pks <- query(dda, \"query ms2data where rtmin = 200 and rtmax = 300\") length(pks) ## [1] 216 head(pks[[1L]]) ##            mz   intensity ## [1,] 54.93746 0.021841669 ## [2,] 55.93555 0.173691928 ## [3,] 70.94262 0.011819169 ## [4,] 71.71149 0.017824525 ## [5,] 71.72899 0.005942247 ## [6,] 71.93047 0.834873378 tic <- query(dda, \"query scansum(ms1data)\") plot(tic, type = \"l\", xlab = \"scan index\") si <- query(dda, \"query scaninfo(*) where rtmin = 300 and rtmax = 500\") si ## DataFrame with 2236 rows and 35 columns ##        msLevel     rtime acquisitionNum scanIndex            dataStorage ##      <integer> <numeric>      <integer> <integer>            <character> ## 1            1   300.123           2271      2271 /__w/_temp/Library/m.. ## 2            2   300.395           2272      2272 /__w/_temp/Library/m.. ## 3            1   300.533           2273      2273 /__w/_temp/Library/m.. ## 4            1   300.654           2274      2274 /__w/_temp/Library/m.. ## 5            1   300.775           2275      2275 /__w/_temp/Library/m.. ## ...        ...       ...            ...       ...                    ... ## 2232         2   499.391           4502      4502 /__w/_temp/Library/m.. ## 2233         1   499.529           4503      4503 /__w/_temp/Library/m.. ## 2234         2   499.691           4504      4504 /__w/_temp/Library/m.. ## 2235         2   499.811           4505      4505 /__w/_temp/Library/m.. ## 2236         1   499.948           4506      4506 /__w/_temp/Library/m.. ##                  dataOrigin centroided  smoothed  polarity precScanNum ##                 <character>  <logical> <logical> <integer>   <integer> ## 1    /__w/_temp/Library/m..       TRUE        NA         1          NA ## 2    /__w/_temp/Library/m..       TRUE        NA         1          NA ## 3    /__w/_temp/Library/m..       TRUE        NA         1          NA ## 4    /__w/_temp/Library/m..       TRUE        NA         1          NA ## 5    /__w/_temp/Library/m..       TRUE        NA         1          NA ## ...                     ...        ...       ...       ...         ... ## 2232 /__w/_temp/Library/m..       TRUE        NA         1          NA ## 2233 /__w/_temp/Library/m..       TRUE        NA         1          NA ## 2234 /__w/_temp/Library/m..       TRUE        NA         1          NA ## 2235 /__w/_temp/Library/m..       TRUE        NA         1          NA ## 2236 /__w/_temp/Library/m..       TRUE        NA         1          NA ##      precursorMz precursorIntensity precursorCharge collisionEnergy ##        <numeric>          <numeric>       <integer>       <numeric> ## 1             NA                 NA              NA              NA ## 2        320.106                  0               0               0 ## 3             NA                 NA              NA              NA ## 4             NA                 NA              NA              NA ## 5             NA                 NA              NA              NA ## ...          ...                ...             ...             ... ## 2232     252.995                  0               0               0 ## 2233          NA                 NA              NA              NA ## 2234     173.079                  0               0               0 ## 2235     368.182                  0               0               0 ## 2236          NA                 NA              NA              NA ##      isolationWindowLowerMz isolationWindowTargetMz isolationWindowUpperMz ##                   <numeric>               <numeric>              <numeric> ## 1                        NA                      NA                     NA ## 2                   319.606                 320.106                320.606 ## 3                        NA                      NA                     NA ## 4                        NA                      NA                     NA ## 5                        NA                      NA                     NA ## ...                     ...                     ...                    ... ## 2232                252.495                 252.995                253.495 ## 2233                     NA                      NA                     NA ## 2234                172.579                 173.079                173.579 ## 2235                367.682                 368.182                368.682 ## 2236                     NA                      NA                     NA ##      peaksCount totIonCurrent basePeakMZ basePeakIntensity ionisationEnergy ##       <integer>     <numeric>  <numeric>         <numeric>        <numeric> ## 1           327        236402    54.0089             44069                0 ## 2            52          5440   233.0023               288                0 ## 3           348        221394    54.0089             39904                0 ## 4           198        211449    54.0089             43642                0 ## 5           377        248240    54.0099             32575                0 ## ...         ...           ...        ...               ...              ... ## 2232          2          1025    98.9837                32                0 ## 2233        370        307324    54.0088             24136                0 ## 2234         10          1360    55.0552                42                0 ## 2235          4          1103   368.1747                42                0 ## 2236        426        318309    54.0088             25913                0 ##          lowMZ    highMZ mergedScan mergedResultScanNum ##      <numeric> <numeric>  <integer>           <integer> ## 1            0         0         NA                  NA ## 2            0         0         NA                  NA ## 3            0         0         NA                  NA ## 4            0         0         NA                  NA ## 5            0         0         NA                  NA ## ...        ...       ...        ...                 ... ## 2232         0         0         NA                  NA ## 2233         0         0         NA                  NA ## 2234         0         0         NA                  NA ## 2235         0         0         NA                  NA ## 2236         0         0         NA                  NA ##      mergedResultStartScanNum mergedResultEndScanNum injectionTime filterString ##                     <integer>              <integer>     <numeric>  <character> ## 1                          NA                     NA             0           NA ## 2                          NA                     NA             0           NA ## 3                          NA                     NA             0           NA ## 4                          NA                     NA             0           NA ## 5                          NA                     NA             0           NA ## ...                       ...                    ...           ...          ... ## 2232                       NA                     NA             0           NA ## 2233                       NA                     NA             0           NA ## 2234                       NA                     NA             0           NA ## 2235                       NA                     NA             0           NA ## 2236                       NA                     NA             0           NA ##                  spectrumId ionMobilityDriftTime scanWindowLowerLimit ##                 <character>            <numeric>            <numeric> ## 1    sample=1 period=1 cy..                   NA                   50 ## 2    sample=1 period=1 cy..                   NA                   50 ## 3    sample=1 period=1 cy..                   NA                   50 ## 4    sample=1 period=1 cy..                   NA                   50 ## 5    sample=1 period=1 cy..                   NA                   50 ## ...                     ...                  ...                  ... ## 2232 sample=1 period=1 cy..                   NA                   50 ## 2233 sample=1 period=1 cy..                   NA                   50 ## 2234 sample=1 period=1 cy..                   NA                   50 ## 2235 sample=1 period=1 cy..                   NA                   50 ## 2236 sample=1 period=1 cy..                   NA                   50 ##      scanWindowUpperLimit electronBeamEnergy ##                 <numeric>          <numeric> ## 1                    2000                 NA ## 2                    2000                 NA ## 3                    2000                 NA ## 4                    2000                 NA ## 5                    2000                 NA ## ...                   ...                ... ## 2232                 2000                 NA ## 2233                 2000                 NA ## 2234                 2000                 NA ## 2235                 2000                 NA ## 2236                 2000                 NA"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"filtering-peaks-within-spectra","dir":"Articles","previous_headings":"Extracting data from Spectra objects with MassQL > Examples","what":"Filtering peaks within spectra","title":"Mass Spec Query Language Support to the Spectra Package","text":"contrast condition statements (\"\"), \"FILTER\" allows filter peak data within spectra. can example filter spectra keeping peaks certain m/z. filter MS1 data keeping peaks m/z value matching 219.095 tolerance 0.01 extract ion count .  can also combine \"QUERY\" restrict certain retention time range generate extracted ion chromatogram (XIC).  Internally, SpectraQL’s function translates MassQL query following combination function calls:","code":"ic <- query(     dda, \"query scansum(ms1data) filter ms1mz = 219.095:tolerancemz=0.1\") plot(ic, type = \"l\", xlab = \"scan index\") ic <- query(     dda,     paste0(\"query scansum(ms1data) where rtmin = 235 and rtmax = 250\",            \" filter ms1mz = 219.095:tolerancemz=0.1\")) plot(ic, type = \"l\", xlab = \"scan index\") res <- dda |>     filterMsLevel(1L) |>     filterRt(c(235, 250)) |>     filterMzValues(219.095, tolerance = 0.1) |>     ionCount()  plot(res, type = \"l\", xlab = \"scan index\")"},{"path":"https://rformassspectrometry.github.io/SpectraQL/articles/SpectraQL.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Mass Spec Query Language Support to the Spectra Package","text":"","code":"## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ## [1] msdata_0.49.0       SpectraQL_1.3.1     ProtGenerics_1.39.2 ## [4] Spectra_1.19.0      BiocParallel_1.43.0 S4Vectors_0.47.0    ## [7] BiocGenerics_0.55.0 generics_0.1.4      BiocStyle_2.37.0    ##  ## loaded via a namespace (and not attached): ##  [1] jsonlite_2.0.0         compiler_4.5.0         BiocManager_1.30.25    ##  [4] Rcpp_1.0.14            Biobase_2.69.0         parallel_4.5.0         ##  [7] cluster_2.1.8.1        jquerylib_0.1.4        systemfonts_1.2.3      ## [10] IRanges_2.43.0         textshaping_1.0.1      yaml_2.3.10            ## [13] fastmap_1.2.0          R6_2.6.1               knitr_1.50             ## [16] htmlwidgets_1.6.4      MASS_7.3-65            bookdown_0.43          ## [19] desc_1.4.3             bslib_0.9.0            rlang_1.1.6            ## [22] cachem_1.1.0           xfun_0.52              fs_1.6.6               ## [25] MsCoreUtils_1.21.0     sass_0.4.10            cli_3.6.5              ## [28] pkgdown_2.1.2.9000     ncdf4_1.24             digest_0.6.37          ## [31] mzR_2.43.0             MetaboCoreUtils_1.17.1 lifecycle_1.0.4        ## [34] clue_0.3-66            evaluate_1.0.3         codetools_0.2-20       ## [37] ragg_1.4.0             rmarkdown_2.29         tools_4.5.0            ## [40] htmltools_0.5.8.1"},{"path":"https://rformassspectrometry.github.io/SpectraQL/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Rainer. Author, maintainer. Andrea Vicini. Author. Sebastian Gibb. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Damiani T, Jarmusch , Aron , Petras D, Phelan V, Zhao H, Bittremieux W, Acharya D, Ahmed M, Bauermeister , Bertin M, Boudreau P, Borges R, Bowen B, Brown C, Chagas F, Clevenger K, Correia M, Crandall W, Crüsemann M, Fahy E, Fiehn O, Garg N, Gerwick W, Gilbert J, Globisch D, Gomes P, Heuckeroth S, James C, Jarmusch S, Kakhkhorov S, Kang K, Kessler N, Kersten R, Kim H, Kirk R, Kohlbacher O, Kontou E, Liu K, Lizama-Chamu , Luu G, Luzzatto Knaan T, Mannochio-Russo H, Marty M, Matsuzawa Y, McAvoy , McCall L, Mohamed O, Nahor O, Neuweger H, Niedermeyer T, Nishida K, Northen T, Overdahl K, Rainer J, Reher R, Rodriguez E, Sachsenberg T, Sanchez L, Schmid R, Stevens C, Subramaniam S, Tian Z, Tripathi , Tsugawa H, van der Hooft J, Vicini , Walter , Weber T, Xiong Q, Xu T, Pluskal T, Dorrestein P, Wang M (2025). “universal language finding mass spectrometry data patterns.” Nature Methods. doi:10.1038/s41592-025-02660-z, https://www.nature.com/articles/s41592-025-02660-z.","code":"@Article{,   title = {A universal language for finding mass spectrometry data patterns},   author = {Tito Damiani and Alan K. Jarmusch and Allegra T. Aron and Daniel Petras and Vanessa V. Phelan and Haoqi Nina Zhao and Wout Bittremieux and Deepa D. Acharya and Mohammed M. A. Ahmed and Anelize Bauermeister and Matthew J. Bertin and Paul D. Boudreau and Ricardo M. Borges and Benjamin P. Bowen and Christopher J. Brown and Fernanda O. Chagas and Kenneth D. Clevenger and Mario S. P. Correia and William J. Crandall and Max Crüsemann and Eoin Fahy and Oliver Fiehn and Neha Garg and William H. Gerwick and Jeffrey R. Gilbert and Daniel Globisch and Paulo Wender P. Gomes and Steffen Heuckeroth and C. Andrew James and Scott A. Jarmusch and Sarvar A. Kakhkhorov and Kyo Bin Kang and Nikolas Kessler and Roland D. Kersten and Hyunwoo Kim and Riley D. Kirk and Oliver Kohlbacher and Eftychia E. Kontou and Ken Liu and Itzel Lizama-Chamu and Gordon T. Luu and Tal {Luzzatto Knaan} and Helena Mannochio-Russo and Michael T. Marty and Yuki Matsuzawa and Andrew C. McAvoy and Laura-Isobel McCall and Osama G. Mohamed and Omri Nahor and Heiko Neuweger and Timo H. J. Niedermeyer and Kozo Nishida and Trent R. Northen and Kirsten E. Overdahl and Johannes Rainer and Raphael Reher and Elys Rodriguez and Timo T. Sachsenberg and Laura M. Sanchez and Robin Schmid and Cole Stevens and Shankar Subramaniam and Zhenyu Tian and Ashootosh Tripathi and Hiroshi Tsugawa and Justin J. J. {van der Hooft} and Andrea Vicini and Axel Walter and Tilmann Weber and Quanbo Xiong and Tao Xu and Tomáš Pluskal and Pieter C. Dorrestein and Mingxun Wang},   journal = {Nature Methods},   year = {2025},   url = {https://www.nature.com/articles/s41592-025-02660-z},   doi = {10.1038/s41592-025-02660-z}, }"},{"path":"https://rformassspectrometry.github.io/SpectraQL/index.html","id":"massql-for-spectra","dir":"","previous_headings":"","what":"MassQL support for Spectra","title":"MassQL support for Spectra","text":"Mass Spec Query Language (MassQL) domain specific language meant succinct way express query mass spectrometry (MS) centric fashion. inspired SQL, attempts bake assumptions MS make querying much natural MS users. SpectraQL package provides support MassQL language R, MS data represented Spectra objects defined Bioconductor’s Spectra package. introduction use cases see package vignette package documentation.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"MassQL support for Spectra","text":"Contributions highly welcome follow contribution guidelines. Also, please check coding style guidelines RforMassSpectrometry vignette.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"MassQL support for Spectra","text":"SpectraQL code provided permissive Artistic 2.0 license. documentation, including manual pages vignettes, distributed CC -SA license.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a Spectra object using MassQL — query","title":"Query a Spectra object using MassQL — query","text":"query function allows query subset/filter Spectra object using Mass Spec Query Language MassQL expression. MassQL query expressed form \"QUERY <type data> <condition> <condition> FILTER <filter> <filter>\", multiple conditions filters can combined logical operations. MassQL definition, conditions subsets data specific spectra filter restricts data within spectrum. Note present MassQL filters supported. Also note MassQL queries interpreted case insensitive SpectraQL. See also package vignette details.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a Spectra object using MassQL — query","text":"","code":"# S4 method for class 'Spectra' query(x, query = character(), ...)"},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a Spectra object using MassQL — query","text":"x Spectra object query. query character(1) MassQL query. ... currently ignored.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a Spectra object using MassQL — query","text":"Depending <type data> part MassQL query.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"type-of-data","dir":"Reference","previous_headings":"","what":"Type of data","title":"Query a Spectra object using MassQL — query","text":"\"<type data>\" allows define data extracted selected spectra. MassQL defines type data \"MS1DATA\" \"MS2DATA\" retrieve data MS1 MS2 scans. default peak data returned, addition, MASSQL defines additional functions can applied modify data select different data returned. addition SpectraQL defines special type data \"*\" return results Spectra object. SpectraQL supports: \"*\": select data return data subset Spectra::Spectra() object. \"MS1DATA\": return Spectra::peaksData() selected MS1 spectra, .e. list two column matrices peaks' m/z intensity values. \"MS2DATA\": return Spectra::peaksData() selected MS2 spectra, .e. list two column matrices peaks' m/z intensity values. \"scaninfo(MS1DATA)\", \"scaninfo(MS2DATA)\": return Spectra::spectraData() selected spectra. \"scansum(MS1DATA)\", \"scansum(MS2DATA)\": sum peak intensities selected spectra (TIC, XIC combined \"FILTER\").","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"conditions","dir":"Reference","previous_headings":"","what":"Conditions","title":"Query a Spectra object using MassQL — query","text":"Conditions define spectra data set subsetted. condition subset Spectra object selected spectra, (unlike Filters, see ) filter peaks spectrum. Several conditions can combined \"\" (case insensitive). syntax condition \"<condition> = <value>\", e.g. \"MS2PROD = 144.1\". conditions can refined additional expressions allow example define acceptable tolerances m/z differences. SpectraQL supports (case insensitive): \"RTMIN\": minimum retention time (seconds). \"RTMAX\": maximum retention time (seconds). \"SCANMIN\": minimum scan number (acquisition number). \"SCANMAX\": maximum scan number (acquisition number). \"CHARGE\": charge MS2 spectra. \"POLARITY\": polarity spectra (can \"positive\", \"negative\", \"pos\" \"neg\", case insensitive). \"MS2PROD\" \"MS2MZ\": allows select MS2 spectra contain peak particular m/z value(s). See examples. \"MS2PREC\": allows select MS2 spectra defined precursor m/z value(s). See examples. \"MS1MZ\": allows select MS1 spectra containing peak(s) defined m/z value(s). \"MS2NL\": allows look neutral loss precursor MS2 spectra. conditions involving m/z values allow specify mass accuracy using optional fields \"TOLERANCEMZ\" \"TOLERANCEPPM\" define absolute m/z-relative acceptable difference m/z values. One fields can attached condition \"MS2PREC=100:TOLERANCEMZ=0.1:TOLERANCEPPM=20\" select example MS2 spectra precursor m/z equal 100 accepting difference 0.1 20 ppm. Note contrast MassQL, default tolarance ppm 0 calls.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"filters","dir":"Reference","previous_headings":"","what":"Filters","title":"Query a Spectra object using MassQL — query","text":"Filters subset data within spectra, .e. select peaks within spectra retrieved. SpectraQL supports following filters: \"MS1MZ\": filters MS1 spectra keeping peaks matching m/z values (tolerance can specified \"TOLERANCEMZ\" \"TOLERANCEPPM\" conditions). \"MS2MZ\": filters MS2 spectra keeping peaks matching m/z values (tolerance can specified \"TOLERANCEMZ\" \"TOLERANCEPPM\" conditions).","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Query a Spectra object using MassQL — query","text":"Andrea Vicini, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/reference/query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a Spectra object using MassQL — query","text":"","code":"## Read a data file with MS1 and MS2 spectra library(msdata) library(Spectra) #> Loading required package: S4Vectors #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: ‘generics’ #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: BiocParallel fls <- dir(system.file(\"TripleTOF-SWATH\", package = \"msdata\"),     full.names = TRUE) sps_dda <- Spectra(fls[1L])  ## Subset to spectra measured between 300 and 400 seconds query(sps_dda, \"QUERY * WHERE RTMIN = 300 AND RTMAX = 400\") #> MSn data (Spectra) with 971 spectra in a MsBackendMzR backend: #>       msLevel     rtime scanIndex #>     <integer> <numeric> <integer> #> 1           1   300.123      2271 #> 2           2   300.395      2272 #> 3           1   300.533      2273 #> 4           1   300.654      2274 #> 5           1   300.775      2275 #> ...       ...       ...       ... #> 967         1   399.277      3237 #> 968         1   399.406      3238 #> 969         1   399.527      3239 #> 970         2   399.798      3240 #> 971         1   399.936      3241 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Processing: #>  Filter: select retention time [300..400] on MS level(s)  [Fri May 16 19:49:49 2025]   ## To extract peaks data from MS1 or MS2 spectra use \"MS1DATA\" or \"MS2DATA\" ## instead of *. Note also that queries are case-insensitive. pks <- query(sps_dda, \"query ms1data where rtmin = 300 and rtmax = 400\") pks #> List of length 326 head(pks[[1L]]) #>            mz  intensity #> [1,] 50.01534 0.06152615 #> [2,] 51.01116 0.20895603 #> [3,] 51.94061 0.09404848 #> [4,] 52.01844 2.00179029 #> [5,] 53.00222 0.09347252 #> [6,] 53.01401 0.74939591  ## To select (MS2) spectra with a certain precursor m/z the MS2PREC condition ## can be used. Below we extract all spectra with a precursor m/z of 99.9 ## accepting also a difference of 10ppm query(sps_dda, \"QUERY * WHERE MS2PREC = 99.967:TOLERANCEPPM=10\") #> MSn data (Spectra) with 1 spectra in a MsBackendMzR backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1         2   884.843      7495 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Processing: #>  Filter: select spectra with precursor m/z matching 99.967 [Fri May 16 19:49:49 2025]   ## It is also possible to specify multiple precursor m/z values: query(sps_dda, \"QUERY * WHERE MS2PREC = (99.967 OR 428.88):TOLERANCEPPM=10\") #> MSn data (Spectra) with 2 spectra in a MsBackendMzR backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1         2   884.843      7495 #> 2         2   887.813      7516 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Processing: #>  Filter: select spectra with precursor m/z matching 99.967, 428.88 [Fri May 16 19:49:49 2025]   ## To select all MS1 spectra that contain a peak with a certain m/z we can ## use the MS1MZ condition. Below we combine this with an absolute tolerance ## using TOLERANCEMZ. query(sps_dda, \"QUERY * WHERE MS1MZ = 100:TOLERANCEMZ=1\") #> MSn data (Spectra) with 4625 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 4621         1   899.491      7598 #> 4622         1   899.613      7599 #> 4623         1   899.747      7600 #> 4624         1   899.872      7601 #> 4625         1   899.993      7602 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Processing: #>  Filter: select MS level(s) 1 [Fri May 16 19:49:49 2025]   ## Using MS2DATA in combination with MS1MZ will not return any spectra. query(sps_dda, \"QUERY MS2DATA WHERE MS1MZ = 100:TOLERANCEMZ=1\") #> List of length 0  ## In contrast, do select MS2 spectra containing a peak with a certain m/z ## we have to use the condition MS2PROD query(sps_dda, \"QUERY * WHERE MS2PROD = 100:TOLERANCEMZ=1\") #> MSn data (Spectra) with 260 spectra in a MsBackendMzR backend: #>       msLevel     rtime scanIndex #>     <integer> <numeric> <integer> #> 1           2    47.183       370 #> 2           2    79.371       617 #> 3           2    81.661       631 #> 4           2    97.140       744 #> 5           2    97.550       746 #> ...       ...       ...       ... #> 256         2   884.163      7491 #> 257         2   884.843      7495 #> 258         2   890.443      7535 #> 259         2   893.072      7554 #> 260         2   898.602      7591 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Processing: #>  Filter: select MS level(s) 2 [Fri May 16 19:49:50 2025]   ## MS2MZ can be used as alternative to MS2PROD query(sps_dda, \"QUERY * WHERE MS2MZ = 100:TOLERANCEMZ=1\") #> MSn data (Spectra) with 7602 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 34 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## Select MS2 spectra containing a peak with neutral loss from ## precursor of 100 allowing a m/z relative ppm tolerance of 5) res <- query(sps_dda, \"QUERY MS2DATA WHERE MS2NL=100:TOLERANCEPPM=5\")  ## Combine two different conditions: selection of spectra with positive ## polarity and retention time greater than 200 res <- query(sps_dda, \"QUERY * WHERE RTMIN = 200 AND POLARITY = Positive\")"},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-1-3","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.1","title":"SpectraQL 1.3","text":"Add citation.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-99","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.2","title":"SpectraQL 0.99","text":"Add man/figures folder Rbuildignore.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-99-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.1","title":"SpectraQL 0.99","text":"Add S4Vectors package Suggests ’s used unit tests.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-99-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.0","title":"SpectraQL 0.99","text":"Prepare clean package Bioconductor submission.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-98","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.6","title":"SpectraQL 0.98","text":"Update README, DESCRIPTION.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-98-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.4","title":"SpectraQL 0.98","text":"Add support \"FILTER MS1MZ\" \"FILTER MS2MZ\".","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-98-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.3","title":"SpectraQL 0.98","text":"Fix MS1DATA MS2DATA return peaks data. Add support functions (scansum, scaninfo). Fix parsing part.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-98-3","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.2","title":"SpectraQL 0.98","text":"Change filterPrecursorMz filterPrecursorMzValues. Support \"\" \"MS2PREC\", MS1MZ, MS2PROD. Add MS1MZ.","code":""},{"path":"https://rformassspectrometry.github.io/SpectraQL/news/index.html","id":"changes-in-0-98-4","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.1","title":"SpectraQL 0.98","text":"Add functionality extract requested data Spectra. Add vignette first use cases.","code":""}]
